Conceitos

- A linguagem python possui muitos frameworks para desenvolvimento de aplicações de interface gráfica para interação com o usuário, chamadas, comumente, de GUI (Graphical User Interface)
- O framework mais comum é o Tkinter (python interface to Tcl/Tk-2020) que já faz parte da instalação python, mas existem outros frameworks com características específicas que podem torná-los a escolha adequada para um projeto.
- Entre os frameworks para aplicações GUI mais comuns estão:

Interface GUI


Vantagens

- Facilidade de interação do usuário com o sistema por meio da utilização de componentes intuitivos.
- Simplicidade de utilizar os componentes em um programa.
- Compatibilidade do componente com múltiplas plataformas.
- Criação de uma camada de abstração para o programador sobre detalhes da programação dos componentes.
- Incorporação de aspectos que facilitem a experiência do usuário com o sistema.
- Facilidade para o usuário alternar rapidamente entre as funcionalidades do sistema.
- Bastante documentada e com uma comunidade engajada, o que ajuda a perceber novas aplicações e evoluções dos componentes que vão melhorar a aplicação dos componentes GUI no sistema.


Desvantagens

- Alguns componentes de interface gráfica usam muitos recursos computacionais, pois têm como objetivo ser amigáveis para o usuário e não necessariamente fazer uso otimizado dos recursos. Como consequência, podem tornar as aplicações muitos lentas para plataformas de versões mais antigas.
- O uso dos componentes na programação pode ser excessivamente complexo, fazendo com que o desenvolvedor tenha que desviar esforço do objetivo principal para se preocupar com detalhes dos componentes GUI.
- As bibliotecas disponibilizam componentes, mas a aplicação deles no sistema é responsabilidade do desenvolvedor. Além de se preocupar com aspectos de programação, é necessário se preocupar como esses componentes vão ser disponibilizados no sistema, pois, caso contrário, algumas tarefas podem ser mais demoradas devido a muitos níveis de interação para selecionar a escolha desejada, como, por exemplo, o uso excessivo de menus e submenus.
- Os componentes precisam ter comportamentos previsíveis. Comportamentos inesperados são potencialmente perigosos, pois podem dar acesso não autorizado a partes do sistema, revelando, assim, vulnerabilidades de segurança.
- Sistemas baseados em componentes GUI requerem mais memória RAM para serem executados.
- Ainda sobre uso de recursos computacionais, sistemas baseados em componentes GUI demandam por processamento.
- Podem ter um comportamento distinto quando operam em diferentes plataformas, tanto na parte visual como pela demanda de recursos computacionais.
- O tempo necessário para utilizar os componentes GUI no sistema pode ser longo, em especial quando há necessidade de atender a muitos requisitos de infraestrutura.
- A curva de aprendizado para profissionais não experientes pode ser proibitiva para o desenvolvimento de projetos de curto de prazo.
